version: 2.1
orbs:
  hubploy:
    jobs:
      build-image:
        description: "Build an image via hubploy"
        parameters:
          deployment:
            type: string
          push:
            type: boolean
            default: false

        docker:
          - image: python:3.7-slim-buster
        working_directory: ~/repo
        steps:
          - checkout
          - run:
              name: Install git, git-crypt & curl
              command: |
                apt-get update && apt-get install --yes --no-install-recommends git curl git-crypt

          - restore_cache:
              keys:
                - v3.7-dependencies-{{ checksum "requirements.txt" }}
                # fallback to using the latest cache if no exact match is found
                - v3.7-dependencies-

          - run:
              name: install dependencies
              command: |
                python3 -m venv venv
                source venv/bin/activate
                pip install --upgrade -r requirements.txt
                # Install latest repo2docker to https://github.com/jupyter/repo2docker/pull/657
                pip install --upgrade git+https://github.com/jupyter/repo2docker@e976627c1e238cf654ad178456b1bf81db7aac36
                echo 'export PATH="${HOME}/repo/venv/bin:$PATH"' >> ${BASH_ENV}

          - unless:
              condition: << parameters.push >>
              steps:
                - run:
                    name: Determine range of commits we are building
                    command: |
                        # CircleCI doesn't have equivalent to Travis' COMMIT_RANGE
                        COMMIT_RANGE=$(./.circleci/get-commit-range.py)
                        echo ${COMMIT_RANGE}
                        echo "export COMMIT_RANGE='${COMMIT_RANGE}'" >> ${BASH_ENV}

          - when:
              condition: << parameters.push >>
              # Currently all our images live on google cloud, so we install gcloud sdk when pushing
              steps:
              - run:
                  name: Install google cloud sdk
                  command: |
                    curl -sSL  https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-265.0.0-linux-x86_64.tar.gz | tar -xzf -
                    # Be careful with quote ordering here. ${PATH} must not be expanded
                    # Don't use ~ here - bash can interpret PATHs containing ~, but most other things can't.
                    # Always use full PATHs in PATH!
                    echo 'export PATH="${HOME}/repo/google-cloud-sdk/bin:${PATH}"' >> ${BASH_ENV}
                    # Try to tell cloud sdk to use python3
                    echo 'export CLOUDSDK_PYTHON=python3' >> ${BASH_ENV}

          - setup_remote_docker
          - save_cache:
              paths:
                - ./venv
              key: v3.7-dependencies-{{ checksum "requirements.txt" }}

          - when:
              condition: << parameters.push >>
              steps:
              - run:
                  name: Unlock our secrets
                  command: |
                    echo "${GIT_CRYPT_KEY}" | base64 -d > ~/repo/key
                    git crypt unlock ~/repo/key
                    rm ~/repo/key

          - run:
              name: Build image if needed
              command: |
                if [ "<< parameters.push >>" == "true" ]; then
                  HUBPLOY_ARGS="--check-registry --push"
                else
                  HUBPLOY_ARGS="--commit-range ${COMMIT_RANGE}"
                fi
                hubploy build << parameters.deployment >>  ${HUBPLOY_ARGS}

      helm:
        description: "Deploy a hub via hubploy"
        parameters:
          deployment:
            type: string

        docker:
          - image: python:3.7-slim-buster
        working_directory: ~/repo
        steps:
          - run:
              name: Install base apt packages
              command: |
                apt-get update -qq --yes
                apt-get install -qq --yes python3 python3-venv git-crypt apt-transport-https

          - checkout

          # Download and cache dependencies
          - restore_cache:
              keys:
                - v3.7-dependencies-gcloud-265-{{ checksum "requirements.txt" }}
                # fallback to using the latest cache if no exact match is found
                - v3.7-dependencies-gcloud-265-

          - run:
              name: install dependencies
              command: |
                python3 -m venv venv
                source venv/bin/activate
                pip install --upgrade -r requirements.txt
                # Install latest repo2docker to https://github.com/jupyter/repo2docker/pull/657
                pip install --upgrade git+https://github.com/jupyter/repo2docker@e976627c1e238cf654ad178456b1bf81db7aac36

                # Can be removed once https://github.com/docker/docker-py/issues/2225 is merged and released
                pip install --upgrade git+https://github.com/docker/docker-py.git@b6f6e7270ef1acfe7398b99b575d22d0d37ae8bf

                curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-265.0.0-linux-x86_64.tar.gz | tar -C venv/ -xzf -
                # Be careful with quote ordering here. ${PATH} must not be expanded
                # Don't use ~ here - bash can interpret PATHs containing ~, but most other things can't.
                # Always use full PATHs in PATH!
                echo 'export PATH="${HOME}/repo/venv/bin:${HOME}/repo/venv/google-cloud-sdk/bin:${PATH}"' >> ${BASH_ENV}

          # FIXME: Only install this if we're using azure
          # https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest
          - run:
              name: Install azure client
              command: |
                echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ buster main" | \
                    tee /etc/apt/sources.list.d/azure-cli.list
                curl -sL https://packages.microsoft.com/keys/microsoft.asc | \
                    gpg --dearmor | \
                    tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null
                apt-get update  -qq --yes
                apt-get install -qq --yes azure-cli

          - save_cache:
              paths:
                - ./venv
              key: v3.7-dependencies-gcloud-265-{{ checksum "requirements.txt" }}

          - run:
              name: Unlock our secrets
              command: |
                echo "${GIT_CRYPT_KEY}" | base64 -d > ~/repo/key
                git crypt unlock ~/repo/key
                rm ~/repo/key

          - run:
              name: Install helm
              command: |
                curl https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | \
                  tar -xzf -
                mv linux-amd64/helm /usr/local/bin
                helm init --client-only
                helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
                helm repo update

          - run:
              name: Post annotation to Grafana
              command: |
                # We get GRAFANA_API_KEY from circle secret config. FIXME: put this inside git-crypt
                export PULL_REQUEST_ID=$(git log -1 --pretty=%B | head -n1 | sed 's/^.*#\([0-9]*\).*/\1/')
                export AUTHOR_NAME="$(git log  -1 --pretty=%aN)"
                export PULL_REQUEST_TITLE="$(git log --pretty=%B -1 | tail -n+3)"
                python3 scripts/post-grafana-annotation.py  \
                  --grafana-url http://grafana.datahub.berkeley.edu\
                  --tag deployment-start \
                  "$(echo -en ${PULL_REQUEST_TITLE}\\n\\n${AUTHOR_NAME}: https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pull/${PULL_REQUEST_ID})"

          - run:
              name: Deploy << parameters.deployment >>
              command: |
                hubploy deploy << parameters.deployment >> hub ${CIRCLE_BRANCH}

jobs:
  deploy-support:
    docker:
      - image: buildpack-deps:bionic-scm
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: install git-crypt
          command: |
            apt-get update --yes -qq
            apt-get install --yes -qq git-crypt

      - run:
          name: install google-cloud-sdk
          command: |
            curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-265.0.0-linux-x86_64.tar.gz | tar -xzf -
            # Be careful with quote ordering here. ${PATH} must not be expanded
            # Don't use ~ here - bash can interpret PATHs containing ~, but most other things can't.
            # Always use full PATHs in PATH!
            echo 'export PATH="${HOME}/repo/google-cloud-sdk/bin:${PATH}"' >> ${BASH_ENV}

      - run:
          name: Unlock our secrets
          command: |
            echo "${GIT_CRYPT_KEY}" | base64 -d > ~/repo/key
            git crypt unlock ~/repo/key
            rm ~/repo/key

      - run:
          name: Install helm
          command: |
            curl https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | \
              tar -xzf -
            mv linux-amd64/helm /usr/local/bin
            helm init --client-only
            helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
            helm repo update

      - run:
          name: Activate credentials for datahub cluster (fall-2019)
          command: |
            gcloud auth \
              activate-service-account \
              --key-file deployments/datahub/secrets/gke-key.json

            gcloud container clusters \
              --region=us-central1 --project=ucb-datahub-2018 \
              get-credentials fall-2019

      - run:
          name: Deploy support helm chart
          command: |
            helm dep up support
            helm upgrade \
              --install --wait \
              --namespace=support \
              support support/ \
              -f support/secrets.yaml

workflows:
  version: 2
  test-build-images:
    jobs:
      - hubploy/build-image:
          deployment: datahub
          name: datahub image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                ignore:
                - staging
                - prod
      - hubploy/build-image:
          deployment: prob140
          name: prob140 image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                ignore:
                - staging
                - prod
      - hubploy/build-image:
          deployment: r
          name: r hub image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                ignore:
                - staging
                - prod
      - hubploy/build-image:
          deployment: julia
          name: julia hub image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                ignore:
                - staging
                - prod
      - hubploy/build-image:
          deployment: data102
          name: data102 image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                ignore:
                - staging
                - prod
      - hubploy/build-image:
          deployment: data8x
          name: data8x image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                ignore:
                - staging
                - prod
      - hubploy/build-image:
          deployment: data100
          name: data100 image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                ignore:
                - staging
                - prod

  deploy:
    jobs:
      - hubploy/build-image:
          deployment: datahub
          name: datahub image build
          push: true
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod
      - hubploy/build-image:
          deployment: prob140
          name: prob140 image build
          push: true
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod
      - hubploy/build-image:
          deployment: r
          name: r hub image build
          push: true
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod
      - hubploy/build-image:
          deployment: julia
          name: julia hub image build
          push: true
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

      - hubploy/build-image:
          deployment: data102
          name: data102 image build
          push: true
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod
      - hubploy/build-image:
          deployment: data8x
          name: data8x image build
          push: true
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod
      - hubploy/build-image:
          deployment: data100
          name: data100 image build
          push: true
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

      - hubploy/helm:
          deployment: datahub
          name: datahub helm deploy
          requires:
            - datahub image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

      - hubploy/helm:
          deployment: prob140
          name: prob140 helm deploy
          requires:
            - prob140 image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

      - hubploy/helm:
          deployment: r
          name: r hub helm deploy
          requires:
            - r hub image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

      - hubploy/helm:
          deployment: julia
          name: julia hub helm deploy
          requires:
            - julia hub image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

      - hubploy/helm:
          deployment: data102
          name: data102 helm deploy
          requires:
            - data102 image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

      - hubploy/helm:
          deployment: data8x
          name: data8x helm deploy
          requires:
            - data8x image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

      - hubploy/helm:
          deployment: data100
          name: data100 helm deploy
          requires:
            - data100 image build
          # Filters can only be per-job? wtf
          filters:
              branches:
                only:
                - staging
                - prod

  deploy-support:
    jobs:
      - deploy-support:
          filters:
            branches:
              # We don't have staging / prod for our support cluster
              # So we deploy only when deploying staging
              only: staging
